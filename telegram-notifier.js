// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const config = {
    botToken: '7433469523:AAE94asxAzaO_4p-G9Z2dhzxJKaV_Q1n76s',
    chatId: '5466961396'
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è IP
async function getIPAddress() {
    const services = [
        'https://api.ipify.org?format=json',
        'https://ipapi.co/json/',
        'https://ipinfo.io/json',
        'https://api.myip.com'
    ];

    for (const service of services) {
        try {
            const response = await fetch(service);
            if (!response.ok) continue;
            
            const data = await response.json();
            return data.ip || data.query || null;
        } catch (error) {
            console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ ${service}:`, error);
            continue;
        }
    }
    return null;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–±–æ—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ—Å–µ—Ç–∏—Ç–µ–ª–µ
async function collectVisitorInfo() {
    const parser = new UAParser();
    const uaResult = parser.getResult();
    
    const ipAddress = await getIPAddress();
    
    return {
        userAgent: navigator.userAgent,
        screenWidth: window.screen.width,
        screenHeight: window.screen.height,
        language: navigator.language,
        timezone: Intl.DateTimeFormat().resolvedOptions().timeZone,
        currentTime: new Date().toLocaleString(),
        pageUrl: window.location.href,
        referrer: document.referrer || '–ü—Ä—è–º–æ–π –∑–∞—Ö–æ–¥',
        browser: `${uaResult.browser.name} ${uaResult.browser.version}`,
        os: `${uaResult.os.name} ${uaResult.os.version}`,
        deviceType: uaResult.device.type || 'desktop',
        ip: ipAddress || '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å'
    };
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
function formatTelegramMessage(info) {
    return `üîî –ù–æ–≤—ã–π –ø–æ—Å–µ—Ç–∏—Ç–µ–ª—å –Ω–∞ —Å–∞–π—Ç–µ!\n\n` +
           `üïí –í—Ä–µ–º—è: ${info.currentTime}\n` +
           `üåê IP: ${info.ip}\n` +
           `üíª –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: ${info.deviceType === 'mobile' ? '–ú–æ–±–∏–ª—å–Ω–æ–µ' : 
                          info.deviceType === 'tablet' ? '–ü–ª–∞–Ω—à–µ—Ç' : '–ö–æ–º–ø—å—é—Ç–µ—Ä'}\n` +
           `üîç –ë—Ä–∞—É–∑–µ—Ä: ${info.browser}\n` +
           `üñ• –û–°: ${info.os}\n` +
           `üìè –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ: ${info.screenWidth}x${info.screenHeight}\n` +
           `üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞: ${info.pageUrl}\n` +
           `üîó –ò—Å—Ç–æ—á–Ω–∏–∫: ${info.referrer}\n` +
           `üåç –Ø–∑—ã–∫: ${info.language}`;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
async function sendTelegramNotification(message) {
    try {
        const url = `https://api.telegram.org/bot${config.botToken}/sendMessage`;
        const response = await fetch(url, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                chat_id: config.chatId,
                text: message,
                parse_mode: 'HTML',
                disable_notification: false
            })
        });
        
        const data = await response.json();
        console.log('–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:', data);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏:', error);
    }
}

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function trackVisitor() {
    const visitorInfo = await collectVisitorInfo();
    const message = formatTelegramMessage(visitorInfo);
    await sendTelegramNotification(message);
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', trackVisitor);